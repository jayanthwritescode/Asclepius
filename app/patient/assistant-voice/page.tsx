'use client'

import { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { useRouter, useSearchParams } from 'next/navigation'
import { 
  ArrowLeft, 
  Mic, 
  MicOff,
  Volume2,
  VolumeX,
  Loader2,
  MessageSquare,
  Calendar,
  FileText,
  Pill
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { useVoiceChat } from '@/lib/use-voice-chat'
import { VoiceWaveform, ListeningIndicator, SpeakingIndicator } from '@/components/voice-waveform'

export default function PatientAssistantVoicePage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const langParam = searchParams.get('lang') || 'en-IN'
  
  const greetings: Record<string, string> = {
    'en-IN': "Hello! I'm your digital health assistant. I can help you with explaining medical reports, scheduling appointments, medication reminders, symptom checking, and health information. How can I assist you today?",
    'hi-IN': 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдбрд┐рдЬрд┐рдЯрд▓ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдореЗрдбрд┐рдХрд▓ рд░рд┐рдкреЛрд░реНрдЯ рд╕рдордЭрд╛рдиреЗ, рдЕрдкреЙрдЗрдВрдЯрдореЗрдВрдЯ рд╢реЗрдбреНрдпреВрд▓ рдХрд░рдиреЗ, рджрд╡рд╛ рд░рд┐рдорд╛рдЗрдВрдбрд░, рд▓рдХреНрд╖рдг рдЬрд╛рдВрдЪ рдФрд░ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдЬрд╛рдирдХрд╛рд░реА рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?',
    'ta-IN': 'ро╡рогроХрпНроХроорпН! роиро╛ройрпН роЙроЩрпНроХро│рпН роЯро┐роЬро┐роЯрпНроЯро▓рпН роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпН. рооро░рпБродрпНродрпБро╡ роЕро▒ро┐роХрпНроХрпИроХро│рпИ ро╡ро┐ро│роХрпНроХрпБродро▓рпН, роЪроирпНродро┐рокрпНрокрпБроХро│рпИ родро┐роЯрпНроЯрооро┐роЯрпБродро▓рпН, рооро░рпБроирпНродрпБ роиро┐ройрпИро╡рпВроЯрпНроЯро▓рпНроХро│рпН, роЕро▒ро┐роХрпБро▒ро┐ роЪрпЛродройрпИ рооро▒рпНро▒рпБроорпН роЪрпБроХро╛родро╛ро░ родроХро╡ро▓рпНроХро│ро┐ро▓рпН роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН. роЗройрпНро▒рпБ роиро╛ройрпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?',
    'te-IN': 'р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б р░ор▒А р░бр░┐р░Ьр░┐р░Яр░▓р▒Н р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░╡р▒Ир░жр▒Нр░п р░ир░┐р░╡р▒Зр░жр░┐р░Хр░▓р░ир▒Б р░╡р░┐р░╡р░░р░┐р░Вр░Ър░бр░В, р░Ер░кр░╛р░пр░┐р░Вр░Яр▒НтАМр░ор▒Жр░Вр░Яр▒НтАМр░▓р▒Б р░╖р▒Жр░бр▒Нр░пр▒Вр░▓р▒Н р░Ър▒Зр░пр░бр░В, р░ор░Вр░жр▒Бр░▓ р░░р░┐р░ор▒Ир░Вр░бр░░р▒НтАМр░▓р▒Б, р░▓р░Хр▒Нр░╖р░г р░др░ир░┐р░Цр▒А р░ор░░р░┐р░пр▒Б р░Жр░░р▒Лр░Чр▒Нр░п р░╕р░ор░╛р░Ър░╛р░░р░Вр░▓р▒Л р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б. р░Ир░░р▒Лр░Ьр▒Б р░ир▒Зр░ир▒Б р░ор▒Ар░Хр▒Б р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?',
    'bn-IN': 'ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржорзЗржбрж┐ржХрзЗрж▓ рж░рж┐ржкрзЛрж░рзНржЯ ржмрзНржпрж╛ржЦрзНржпрж╛ ржХрж░рж╛, ржЕрзНржпрж╛ржкржпрж╝рзЗржирзНржЯржорзЗржирзНржЯ рж╢рж┐ржбрж┐ржЙрж▓ ржХрж░рж╛, ржУрж╖рзБржзрзЗрж░ ржЕржирзБрж╕рзНржорж╛рж░ржХ, рж▓ржХрзНрж╖ржг ржкрж░рзАржХрзНрж╖рж╛ ржПржмржВ рж╕рзНржмрж╛рж╕рзНржерзНржп рждржерзНржпрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред ржЖржЬ ржЖржорж┐ ржЖржкржирж╛ржХрзЗ ржХрзАржнрж╛ржмрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐?',
    'mr-IN': 'рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ рдбрд┐рдЬрд┐рдЯрд▓ рдЖрд░реЛрдЧреНрдп рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗред рдореА рд╡реИрджреНрдпрдХреАрдп рдЕрд╣рд╡рд╛рд▓ рд╕рдордЬрд╛рд╡реВрди рд╕рд╛рдВрдЧрдгреЗ, рднреЗрдЯреА рд╢реЗрдбреНрдпреВрд▓ рдХрд░рдгреЗ, рдФрд╖рдз рд╕реНрдорд░рдгрдкрддреНрд░реЗ, рд▓рдХреНрд╖рдг рддрдкрд╛рд╕рдгреА рдЖрдгрд┐ рдЖрд░реЛрдЧреНрдп рдорд╛рд╣рд┐рддреАрдордзреНрдпреЗ рддреБрдореНрд╣рд╛рд▓рд╛ рдорджрдд рдХрд░реВ рд╢рдХрддреЛред рдЖрдЬ рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?',
    'gu-IN': 'ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ ркбрк┐ркЬрк┐ркЯрк▓ ркЖрк░рлЛркЧрлНркп рк╕рк╣рк╛ркпркХ ркЫрлБркВ. рк╣рлБркВ ркдркмрлАркмрлА ркЕрк╣рлЗрк╡рк╛рк▓рлЛ рк╕ркоркЬрк╛рк╡рк╡рк╛, ркорлБрк▓рк╛ркХрк╛ркдрлЛ рк╢рлЗркбрлНркпрлВрк▓ ркХрк░рк╡рк╛, ркжрк╡рк╛ рк░рлАркорк╛ркЗркирлНркбрк░рлНрк╕, рк▓ркХрлНрк╖ркг ркдрккрк╛рк╕ ркЕркирлЗ ркЖрк░рлЛркЧрлНркп ркорк╛рк╣рк┐ркдрлАркорк╛ркВ ркдркоркирлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ ркЫрлБркВ. ркЖркЬрлЗ рк╣рлБркВ ркдркоркирлЗ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?',
    'kn-IN': 'р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор│Нр▓о р▓бр▓┐р▓Ьр▓┐р▓Яр▓▓р│Н р▓Жр▓░р│Лр▓Чр│Нр▓п р▓╕р▓╣р▓╛р▓пр▓Х. р▓╡р│Ир▓жр│Нр▓пр▓Хр│Ар▓п р▓╡р▓░р▓жр▓┐р▓Чр▓│р▓ир│Нр▓ир│Б р▓╡р▓┐р▓╡р▓░р▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б, р▓нр│Зр▓Яр▓┐р▓Чр▓│р▓ир│Нр▓ир│Б р▓ир▓┐р▓Чр▓жр▓┐р▓кр▓бр▓┐р▓╕р│Бр▓╡р│Бр▓жр│Б, р▓Фр▓╖р▓зр▓┐ р▓Ьр│Нр▓Юр▓╛р▓кр▓ир│Жр▓Чр▓│р│Б, р▓░р│Лр▓Чр▓▓р▓Хр│Нр▓╖р▓г р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓ир│Ж р▓ор▓др│Нр▓др│Б р▓Жр▓░р│Лр▓Чр│Нр▓п р▓ор▓╛р▓╣р▓┐р▓др▓┐р▓пр▓▓р│Нр▓▓р▓┐ р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓▓р│Нр▓▓р│Ж. р▓Зр▓Вр▓жр│Б р▓ир▓╛р▓ир│Б р▓ир▓┐р▓ор▓Чр│Ж р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?'
  }
  
  const [messages, setMessages] = useState<Array<{ role: 'user' | 'assistant'; content: string }>>([
    {
      role: 'assistant',
      content: greetings[langParam] || greetings['en-IN']
    }
  ])
  const [isLoading, setIsLoading] = useState(false)
  const [currentTranscript, setCurrentTranscript] = useState('')
  const [isMuted, setIsMuted] = useState(false)
  const [language, setLanguage] = useState(langParam)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const recognitionRef = useRef<any>(null)

  const { 
    isListening, 
    isSpeaking, 
    isSupported,
    toggleListening, 
    speak, 
    stopSpeaking 
  } = useVoiceChat({
    onTranscript: (text, isFinal) => {
      setCurrentTranscript(text)
      if (isFinal && text.trim()) {
        handleVoiceInput(text.trim())
        setCurrentTranscript('')
      }
    },
    onError: (error) => {
      console.error('Voice error:', error)
    },
    language: language
  })

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // Auto-speak first message
  useEffect(() => {
    if (messages.length === 1 && !isMuted) {
      setTimeout(() => {
        speak(messages[0].content)
      }, 1000)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // Cleanup: Stop speaking when component unmounts or when navigating away
  useEffect(() => {
    return () => {
      // Force stop all speech
      window.speechSynthesis.cancel()
      stopSpeaking()
    }
  }, [stopSpeaking])

  // Stop listening when component unmounts
  useEffect(() => {
    return () => {
      if (isListening) {
        recognitionRef.current?.stop()
      }
    }
  }, [isListening])

  const handleVoiceInput = async (userMessage: string) => {
    if (isLoading) return

    setMessages(prev => [...prev, { role: 'user', content: userMessage }])
    setIsLoading(true)

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          messages: [...messages, { role: 'user', content: userMessage }],
          type: 'patient-assistant'
        })
      })

      if (!response.ok) throw new Error('Failed to get response')

      const reader = response.body?.getReader()
      const decoder = new TextDecoder()
      let assistantMessage = ''

      setMessages(prev => [...prev, { role: 'assistant', content: '' }])

      while (true) {
        const { done, value } = await reader!.read()
        if (done) break

        const chunk = decoder.decode(value)
        const lines = chunk.split('\n')

        for (const line of lines) {
          if (line.startsWith('data: ')) {
            const data = line.slice(6)
            if (data === '[DONE]') break

            try {
              const parsed = JSON.parse(data)
              if (parsed.text) {
                assistantMessage += parsed.text
                setMessages(prev => {
                  const newMessages = [...prev]
                  newMessages[newMessages.length - 1].content = assistantMessage
                  return newMessages
                })
              }
            } catch (e) {
              // Skip invalid JSON
            }
          }
        }
      }

      // Auto-toggle: Stop listening before AI speaks
      if (isListening) {
        toggleListening()
      }

      // Speak the response if not muted
      if (!isMuted && assistantMessage) {
        await new Promise(resolve => setTimeout(resolve, 500))
        await speak(assistantMessage)
        
        // Auto-toggle: Resume listening after AI finishes speaking
        await new Promise(resolve => setTimeout(resolve, 1000))
        if (!isListening && !isMuted) {
          toggleListening()
        }
      }
    } catch (error) {
      console.error('Chat error:', error)
      setMessages(prev => [
        ...prev,
        { role: 'assistant', content: 'Sorry, I encountered an error. Please try again.' }
      ])
    } finally {
      setIsLoading(false)
    }
  }

  const toggleMute = () => {
    if (isSpeaking) {
      stopSpeaking()
    }
    setIsMuted(!isMuted)
  }

  const features = [
    { icon: FileText, label: 'Medical Reports', color: 'text-blue-600' },
    { icon: Calendar, label: 'Appointments', color: 'text-purple-600' },
    { icon: Pill, label: 'Medications', color: 'text-green-600' }
  ]

  const languages = [
    { code: 'en-IN', name: 'English', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'hi-IN', name: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'ta-IN', name: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'te-IN', name: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'bn-IN', name: 'ржмрж╛ржВрж▓рж╛', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'mr-IN', name: 'рдорд░рд╛рдареА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'gu-IN', name: 'ркЧрлБркЬрк░рк╛ркдрлА', flag: 'ЁЯЗоЁЯЗ│' },
    { code: 'kn-IN', name: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│' }
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900">
      {/* Header */}
      <header className="glass border-b sticky top-0 z-10">
        <div className="container mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <Button variant="ghost" size="icon" onClick={() => router.push('/patient/assistant')}>
                <ArrowLeft className="w-5 h-5" />
              </Button>
              <div>
                <h1 className="text-xl font-bold">Voice Mode - Health Assistant</h1>
                <p className="text-sm text-muted-foreground">Your AI health companion</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <select
                value={language}
                onChange={(e) => setLanguage(e.target.value)}
                className="px-3 py-2 rounded-lg border bg-background text-sm"
                disabled={isListening || isSpeaking}
              >
                {languages.map(lang => (
                  <option key={lang.code} value={lang.code}>
                    {lang.flag} {lang.name}
                  </option>
                ))}
              </select>
              <Button variant="outline" size="sm" onClick={() => router.push('/patient/assistant')}>
                <MessageSquare className="w-4 h-4 mr-2" />
                Switch to Chat
              </Button>
              <Button variant="outline" size="icon" onClick={toggleMute}>
                {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-6 max-w-4xl">
        {/* Quick Actions */}
        <div className="grid grid-cols-3 gap-4 mb-6">
          {features.map((feature, idx) => (
            <Card key={idx} className="hover:shadow-lg transition-shadow cursor-pointer">
              <CardContent className="p-4 text-center">
                <feature.icon className={`w-8 h-8 mx-auto mb-2 ${feature.color}`} />
                <p className="text-sm font-medium">{feature.label}</p>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Voice Interface */}
        <Card className="mb-6 border-2 border-blue-200 dark:border-blue-800">
          <CardContent className="p-8">
            <div className="flex flex-col items-center gap-6">
              {/* Waveform */}
              <div className="w-full h-20 bg-gradient-to-r from-blue-100 to-green-100 dark:from-blue-900/20 dark:to-green-900/20 rounded-lg overflow-hidden">
                <VoiceWaveform isActive={isListening || isSpeaking} color="#3b82f6" />
              </div>

              {/* Status Indicators */}
              <div className="flex items-center gap-8">
                <ListeningIndicator isListening={isListening} />
                <SpeakingIndicator isSpeaking={isSpeaking} />
              </div>

              {/* Current Transcript */}
              <AnimatePresence>
                {currentTranscript && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    className="w-full p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800"
                  >
                    <p className="text-sm text-muted-foreground mb-1">You're saying:</p>
                    <p className="text-lg">{currentTranscript}</p>
                  </motion.div>
                )}
              </AnimatePresence>

              {/* Microphone Button */}
              <Button
                size="lg"
                variant={isListening ? 'destructive' : 'default'}
                className="w-32 h-32 rounded-full text-xl"
                onClick={toggleListening}
                disabled={!isSupported || isLoading || isSpeaking}
              >
                {isListening ? (
                  <MicOff className="w-12 h-12 animate-pulse" />
                ) : (
                  <Mic className="w-12 h-12" />
                )}
              </Button>

              <p className="text-sm text-muted-foreground text-center max-w-md">
                {isListening 
                  ? "I'm listening... Ask me anything about your health"
                  : isSpeaking
                  ? "I'm speaking... Please wait"
                  : isLoading
                  ? "Thinking..."
                  : "Tap the microphone and ask me anything"}
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Conversation History */}
        <div className="space-y-4">
          <h3 className="font-semibold text-sm text-muted-foreground">Conversation History</h3>
          {messages.map((message, idx) => (
            <motion.div
              key={idx}
              initial={{ opacity: 0, x: message.role === 'user' ? 20 : -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.3 }}
              className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              <div
                className={`max-w-[80%] rounded-2xl px-4 py-3 ${
                  message.role === 'user'
                    ? 'bg-blue-600 text-white'
                    : 'glass border'
                }`}
              >
                <p className="text-sm whitespace-pre-wrap">{message.content}</p>
              </div>
            </motion.div>
          ))}

          {isLoading && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex justify-start"
            >
              <div className="glass border rounded-2xl px-4 py-3">
                <Loader2 className="w-5 h-5 animate-spin text-blue-600" />
              </div>
            </motion.div>
          )}

          <div ref={messagesEndRef} />
        </div>
      </div>
    </div>
  )
}
